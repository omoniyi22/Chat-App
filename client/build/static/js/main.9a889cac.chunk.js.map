{"version":3,"sources":["components/Sidebar.js","containers/Sidebar.js","components/Message.js","components/MessagesList.js","containers/MessageList.js","actions/index.js","components/AddMessage.js","containers/AddMessage.js","constants/ActionTypes.js","App.js","reducers/messages.js","reducers/users.js","reducers/index.js","socket/index.js","saga/index.js","utils/name.js","index.js"],"names":["SidebarComponent","users","id","className","map","user","key","name","Sidebar","connect","state","MessageComponent","message","author","style","float","MessagesListComponent","messages","Message","Key","MessageList","MessageListsComponent","nextMessageId","nextUserId","AddMessageComponent","props","input","onKeyPress","e","dispatch","value","type","ref","node","AddMessage","addMessage","App","Component","action","concat","console","log","chat","combineReducers","setUpSocket","username","socket","WebSocket","onopen","send","JSON","stringify","onmessage","event","data","parse","handleNewMessage","params","takeEvery","chance","Chance","first","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"oPAsBeA,EAnBU,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACrB,2BAAOC,GAAG,UAAUC,UAAU,WAC1B,4BACKF,EAAMG,KAAI,SAAAC,GAAI,OACf,wBAAIC,IAAKD,EAAKH,IAAKG,EAAKE,YCJvBC,EAAUC,aAAQ,SAAAC,GAAK,MAAG,CACnCT,MAAOS,EAAMT,SACb,GAFmBQ,CAEfT,GCQOW,EAVU,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,OAAX,OACrB,uBAAGC,MAAO,CAACC,MAAiB,MAAVF,EAAiB,OAAS,UACxC,2BAAIA,GADR,IACqBD,ICoBVI,EArBe,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAC1B,6BAASf,GAAG,gBACR,4BACKe,EAASb,KAAI,SAAAQ,GAAO,OACjB,kBAACM,EAAD,eACAC,IAAOP,EAAQV,IACXU,UCPPQ,EAAcX,aAAQ,SAAAC,GAAK,MAAG,CACvCO,SAAUP,EAAMO,YAChB,GAFuBR,CAEnBY,GCJJC,EAAgB,EAChBC,EAAa,ECuBDC,EAvBa,SAACC,GAC1B,IAAIC,EACJ,OACI,6BAASxB,GAAI,eACT,2BACAyB,WACI,SAACC,GACgB,UAAVA,EAAEtB,MACDmB,EAAMI,SAASH,EAAMI,MAAO,MAC5BJ,EAAMI,MAAQ,KAI1BC,KAAK,OACLC,IAAK,SAACC,GACEP,EAAQO,OCPfC,EAAazB,aAAQ,iBAAK,MANX,SAAAoB,GAAQ,MAAI,CACpCA,SAAU,SAACjB,EAASC,GAChBgB,EFFkB,SAACjB,EAASC,GAAV,MAAsB,CAC5CkB,KGLuB,cHMvB7B,GAAIoB,IACJV,UACAC,UEFasB,CAAWvB,EAASC,QAIXJ,CAAsCe,GEUjDY,E,uKAZX,OACE,yBAAKlC,GAAG,aACN,2BAAOA,GAAK,WAAU,kBAAC,EAAD,OACtB,6BAASA,GAAG,QACZ,6BAASA,GAAI,iBAAgB,kBAACkB,EAAD,OAC7B,6BAASlB,GAAI,eAAc,kBAAC,EAAD,a,GAPjBmC,a,eCQHpB,EAbE,WAAuB,IAAtBP,EAAqB,uDAAb,GAAI4B,EAAS,uCACnC,OAAQA,EAAOP,MACX,IFHmB,cEInB,IFHwB,mBEIpB,OAAOrB,EAAM6B,OAAO,CAChB3B,QAAQ0B,EAAO1B,QACfC,OAAOyB,EAAOzB,OACdX,GAAGoC,EAAOpC,KAElB,QACI,OAAOQ,ICOJT,EAdD,WAAyB,IAAxBS,EAAuB,uDAAf,GAAI4B,EAAW,uCACrC,OAAQA,EAAOP,MACd,IHJsB,WGMrB,OADSS,QAAQC,IAAI,UACd/B,EAAM6B,OAAO,CAClB,CAAEhC,KAAM+B,EAAO/B,KAAML,GAAIoC,EAAOpC,MAEnC,IHRwB,aGSvB,OAAOoC,EAAOrC,MACf,QACC,OAAOS,ICLKgC,EALFC,YAAgB,CAC5B1B,WACAhB,UCsBc2C,EA1BK,SAACf,EAAUgB,GAC3B,IAAMC,EAAS,IAAIC,UAAU,uBAuB7B,OAtBAD,EAAOE,OAAQ,WACXF,EAAOG,KAAKC,KAAKC,UAAU,CACvBpB,KLJY,WKKZxB,KAAMsC,MAGdC,EAAOM,UAAY,SAACC,GAChB,IRAgB9C,EASQK,EAASC,EQT3ByC,EAAOJ,KAAKK,MAAMF,EAAMC,MAC9B,OAAQA,EAAKvB,MACT,ILbe,cKcXF,GRMgBjB,EQNS0C,EAAK1C,QRMLC,EQNcyC,EAAKzC,ORMT,CAC/CkB,KGpB4B,mBHqB5B7B,GAAIoB,IACJV,UACAC,YQTY,MACJ,ILdY,WKeRgB,GRNQtB,EQMS+C,EAAK/C,KRLlCiC,QAAQC,IAAIlC,GACL,CACPwB,KGZoB,WHapB7B,GAAIqB,IACJhB,UQEY,MACJ,ILhBc,aKiBVsB,EROwB,CACpCE,KGzBsB,aH0BtB9B,MQTsCqD,EAAKrD,UAMpC6C,G,yBClBIU,EANO,UAAG,SAAUA,EAAiBC,GAA3B,iEACrB,OADqB,SACfC,YNHiB,eMGY,SAACpB,GAChCA,EAAOzB,OAAS4C,EAAOZ,SACvBY,EAAOX,OAAOG,KAAKC,KAAKC,UAAUb,OAHjB,oCAAUkB,M,QCApBG,GADF,I,OAAIC,IACKC,QCShBC,EAAiBC,cAEjBC,EAAQC,YACbC,EACAC,YAAgBL,IAEXhB,EAASF,EAAYoB,EAAMnC,SAAUgB,GAC3CiB,EAAeM,IAAIZ,EAAkB,CAACV,SAAQD,aAC9CwB,IAASC,OACR,kBAAC,IAAD,CAAUN,MAAOA,GAChB,kBAAC,EAAD,OAEDO,SAASC,eAAe,W","file":"static/js/main.9a889cac.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst SidebarComponent = ({users})=>(\r\n    <aside id='sidebar' className='sidebar'>\r\n        <ul>\r\n            {users.map(user=>(\r\n            <li key={user.id}>{user.name}</li>\r\n            ))}\r\n        </ul>\r\n    </aside>\r\n)\r\n\r\n// SidebarComponent.PropTypes= {\r\n//     users : PropTypes.arrayOf(\r\n//         PropTypes.shape({\r\n//             name: PropTypes.string.isRequired,\r\n//             id: PropTypes.number.isRequired\r\n//         }).isRequired\r\n//     ).isRequired\r\n// }\r\n\r\nexport default SidebarComponent","import {connect} from 'react-redux'\r\nimport SidebarComponent from '../components/Sidebar'\r\n\r\nexport const Sidebar = connect(state=>({\r\n    users: state.users\r\n}), {})(SidebarComponent)\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst MessageComponent = ({message, author}) =>(\r\n    <p style={{float: author != 'Me' ? \"left\" : \"right\"}}>\r\n        <i>{author}</i>:{message}\r\n    </p>\r\n)\r\n// MessageComponent.PropTypes= {\r\n//     message: PropTypes.string.isRequired,\r\n//     author: PropTypes.string.isRequired\r\n// }\r\n\r\nexport default MessageComponent","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Message from \"./Message\";\r\n\r\nconst MessagesListComponent = ({ messages })=>(\r\n    <section id=\"message-list\">\r\n        <ul>\r\n            {messages.map(message =>(\r\n                <Message\r\n                Key = {message.id}\r\n                {...message}/>\r\n            ))}\r\n        </ul>\r\n    </section>\r\n)\r\n\r\n// MessagesListComponent.PropTypes={\r\n//     messages: PropTypes.arrayOf(\r\n//         PropTypes.shape({\r\n//             id: PropTypes.number.isRequired,\r\n//             author: PropTypes.string.isRequired,\r\n//             messages: PropTypes.string.isRequired,\r\n//         }).isRequired\r\n//     ).isRequired\r\n// }\r\nexport default MessagesListComponent","import {connect} from 'react-redux'\r\nimport MessageListsComponent from '../components/MessagesList'\r\n\r\nexport const MessageList = connect(state=>({\r\n    messages: state.messages\r\n}), {})(MessageListsComponent)","import * as types from './../constants/ActionTypes'\r\nlet nextMessageId = 0\r\nlet nextUserId = 0\r\n\r\nexport const addMessage = (message, author) => ({\r\n    type:  types.ADD_MESSAGE,\r\n    id: nextMessageId++,\r\n    message,\r\n    author\r\n})\r\n\r\nexport const addUser = (name) =>{\r\n    console.log(name)\r\n    return({\r\n    type: types.ADD_USER,\r\n    id: nextUserId++, \r\n    name\r\n}\r\n)}\r\n\r\nexport const messageRecieved = (message, author)=>({\r\n    type: types.MESSAGE_RECEIVED,\r\n    id: nextMessageId++,\r\n    message,\r\n    author\r\n})\r\n\r\nexport const populateUserList = users=>({\r\n    type: types.USERS_LIST,\r\n    users\r\n})","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n const AddMessageComponent = (props)=>{\r\n    let input\r\n    return(\r\n        <section id =\"new-message\">\r\n            <input \r\n            onKeyPress = {\r\n                (e)=>{\r\n                    if(e.key === 'Enter'){\r\n                        props.dispatch(input.value, 'Me')\r\n                        input.value = ''\r\n                    }\r\n                }\r\n            } \r\n            type=\"text\"\r\n            ref={(node)=>{\r\n                    input = node\r\n                }}/>\r\n        </section>\r\n    )\r\n }\r\n//  AddMessageComponent.PropTypes ={\r\n//      dispatch: PropTypes.func.isRequired\r\n//  }\r\n export default AddMessageComponent","import { connect } from 'react-redux'\r\nimport {addMessage} from '../actions'\r\nimport AddMessageComponent from '../components/AddMessage'\r\n\r\nconst mapDispatchToProps  = dispatch =>({\r\n    dispatch: (message, author)=>{\r\n        dispatch(addMessage(message, author))\r\n    }\r\n})\r\n\r\nexport const AddMessage = connect(()=>({}), mapDispatchToProps)(AddMessageComponent)","export const ADD_MESSAGE = 'ADD_MESSAGE'\r\nexport const MESSAGE_RECEIVED = 'MESSAGE_RECEIVED'\r\nexport const ADD_USER = 'ADD_USER'\r\nexport const USERS_LIST = 'USERS_LIST'","import React, { Component } from 'react';\nimport './App.css';\nimport {Sidebar} from './containers/Sidebar'\nimport {MessageList} from \"./containers/MessageList\"\nimport {AddMessage} from './containers/AddMessage'\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"container\">\n        <aside id = \"sidebar\"><Sidebar/></aside>\n        <section id=\"main\">\n        <section id= \"messages-list\"><MessageList/></section>\n        <section id= \"new-message\"><AddMessage/></section>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import * as types from './../constants/ActionTypes'\r\nconst messages = (state = [], action)=>{\r\n    switch (action.type) {\r\n        case types.ADD_MESSAGE:\r\n        case types.MESSAGE_RECEIVED:\r\n            return state.concat({\r\n                message:action.message,\r\n                author:action.author,\r\n                id:action.id\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default messages","\r\n\r\nimport * as types from '../constants/ActionTypes'\r\n\r\nconst users = (state = [], action) => {\r\n\tswitch (action.type) {\r\n\t\tcase types.ADD_USER:\r\n            console.log(\"action\")\r\n\t\t\treturn state.concat([\r\n\t\t\t\t\t{ name: action.name, id: action.id }\r\n\t\t\t\t])\r\n\t\tcase types.USERS_LIST:\r\n\t\t\treturn action.users\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport default users","import { combineReducers } from \"redux\"\r\nimport messages from './messages'\r\nimport users from './users'\r\n\r\nconst chat = combineReducers({\r\n\tmessages,\r\n\tusers\r\n})\r\n\r\nexport default chat","import * as types from '../constants/ActionTypes'\r\nimport {addUser, messageRecieved, populateUserList } from '../actions/index'\r\nconst setUpSocket = (dispatch, username )=>{\r\n    const socket = new WebSocket('ws://localhost:3001')\r\n    socket.onopen= ()=>{\r\n        socket.send(JSON.stringify({\r\n            type: types.ADD_USER,\r\n            name: username\r\n        }))\r\n    }\r\n    socket.onmessage = (event)=>{\r\n        const data = JSON.parse(event.data)\r\n        switch (data.type) {\r\n            case types.ADD_MESSAGE:\r\n                dispatch(messageRecieved(data.message, data.author))\r\n                break;\r\n            case types.ADD_USER:\r\n                dispatch(addUser(data.name))\r\n                break;\r\n            case types.USERS_LIST:\r\n                dispatch(populateUserList(data.users))\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return socket\r\n}\r\nexport default setUpSocket","import {takeEvery} from 'redux-saga/effects'\r\nimport * as types from '../constants/ActionTypes'\r\nconst handleNewMessage = function* handleNewMessage(params) {\r\n    yield takeEvery(types.ADD_MESSAGE, (action)=>{\r\n        action.author = params.username\r\n        params.socket.send(JSON.stringify(action))\r\n    })\r\n}\r\nexport default handleNewMessage","import Chance from 'chance'\r\nlet chance = new Chance()\r\nexport default chance.first()","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport {Provider} from 'react-redux'\nimport {createStore, applyMiddleware} from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\nimport reducers from './reducers'\nimport setUpSocket from './socket'\nimport handleNewMessage from './saga'\nimport username from './utils/name'\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n\treducers,\n\tapplyMiddleware(sagaMiddleware)\n)\nconst socket = setUpSocket(store.dispatch, username)\nsagaMiddleware.run(handleNewMessage, {socket, username})\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, \n\tdocument.getElementById('root')\n);\n\n\n"],"sourceRoot":""}